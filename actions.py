
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

import db


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Just message reply on cmd /start with small instrct. """

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢—Ä–µ–∫–µ—Ä-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
        " –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–∏—à–∏: /add_me",
    )




# TODO: Get mail

# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
# TODO: Add/Remove allowed_users


async def addme(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:

    await update.message.reply_text(
        "–Ø –Ω–∞–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–±—è –≤ —Ä–∞—Å—Å—ã–ª–∫—É"
        " –ï—Å–ª–∏ –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞, —Ç–æ —Ç—ã —Å–º–æ–∂–µ—à—å"
        f" –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É \n\t"
        f"–í–∞—à ID: {update.message.from_user.id}\n\t"
        f"–ò–º—è: {update.message.from_user.first_name}"
    )

    db.add_me(update.message.from_user.id)

ACTION_UU, SELECT_UU, CONFIRM_UU = range(3)

async def start_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:

    garanted, req_users = db.get_all_users()
    txt_users = ""

    txt_users += "\n\tüì• –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤: \n\t"
    for i in req_users:
        txt_users += f"/edit_{i[0]} \n\t"

    txt_users += "üí≥ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–æ–≤: \n\t"
    for i in garanted:
        txt_users += f"/edit_{i[0]}\n\t"

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞: "
        f"{txt_users}"
        "‚ö†Ô∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏ –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –ø–æ—Ç–æ–º –æ—Ç–º–µ–Ω–∏!"
    )

    return SELECT_UU


async def command_called(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.text[1:].split('_')[-1]
    # print(user_id)

    # TODO: If req
    # TODO: If garanted 

    if db.checkuser_status(user_id):
        keyboard = [
            [
                InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="Delete"),
                InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data="Close"),
            ]
        ]
    else:
        keyboard = [
            [
                InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="Delete"),
                InlineKeyboardButton("–î–∞—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="Add_Accses"),
            ],
            [
                InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data="Close"),
            ]
        ]

    await update.message.reply_text(
        "–ú—ã –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    context.user_data['telegram_id'] = user_id

    return ACTION_UU


async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! ")
    db.remove_from_list(context.user_data['telegram_id'])
    return ConversationHandler.END


async def add_accs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! ")
    db.add_accs(context.user_data['telegram_id'])
    return ConversationHandler.END


async def close(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–ü–æ–∫–∞!")
    return ConversationHandler.END

async def close_all(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return ConversationHandler.END


# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
# TODO: Add/Remove keywords
ADD_KW, REMOVE_KW, ACT_KW, CONFIRM_KW, ADD_PROC_KW, REMOVE_PROV_KW = range(6)


# TODO: ask action type: remove or add or view
async def kw_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    
    keyboard = [
        [
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="add_word"),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="remove_word"),
        ],
        [
            InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞", callback_data="view_word"),
            InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data="Close"),
        ]
    ]
    
    await update.message.reply_text(
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: "
        "\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å? ",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return ACT_KW


# TODO: what if add
async def add_kw(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ, –∞ —è –µ–≥–æ –¥–æ–±–∞–≤–ª—é: ")
    context.user_data['proc_kw'] = {'action': 'add', 'word': ''}
    return ADD_PROC_KW


async def record_word(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    txt_user = update.message.text
    context.user_data['proc_kw']['word'] = txt_user

    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data="conf"),
            InlineKeyboardButton("–ó–∞–±—ã—Ç—å", callback_data="forget"),
        ],
    ]

    await update.message.reply_text(
        "–Ø –ø–æ–ª—É—á–∏–ª –æ—Ç —Ç–µ–±—è —Å–ª–æ–≤–æ: \n\t"
        f"–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å {txt_user} "
        "–≤ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CONFIRM_KW


# TODO: what if remove
async def remove_kw(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="ID! –ù–∞–ø—Ä–∞–≤—å ID, –∞ —è –µ–≥–æ —É–¥–∞–ª—é!: \n"
        f"{db.get_kw()}"
    )
    context.user_data['proc_kw'] = {'action': 'remove', 'word': ''}
    return REMOVE_PROV_KW


async def rec_rm_word(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    txt_user = update.message.text
    context.user_data['proc_kw']['word'] = db.get_word(txt_user)

    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data="conf"),
            InlineKeyboardButton("–ó–∞–±—ã—Ç—å", callback_data="forget"),
        ],
    ]

    await update.message.reply_text(
        "–Ø –ø–æ–ª—É—á–∏–ª –æ—Ç —Ç–µ–±—è —Å–ª–æ–≤–æ: \n\t"
        f"–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å {context.user_data['proc_kw']['word']} "
        "–∏–∑ —Å–ø–∏—Å–æ–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CONFIRM_KW

# TODO: what if just view?
async def view_kw(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text=f"{db.get_kw()}")
    return ConversationHandler.END

# TODO: Comm methods
async def confirm_kw(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–•–æ—Ä–æ—à–æ! –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –¥–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é. –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π 20 —Å–µ–∫—É–Ω–¥")
    
    if context.user_data['proc_kw']['action'] == "add":
        db.add_kw(context.user_data['proc_kw']['word'])
    elif context.user_data['proc_kw']['action'] == "remove":
        db.remove_kw(context.user_data['proc_kw']['word'])
    
    return ConversationHandler.END

async def forget_kw(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–ù–∏—á–µ–≥–æ –Ω–µ–±—ã–ª–æ! –í—Å–µ –∑–∞–±—ã–ª <3")
    return ConversationHandler.END

async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    txt_user = update.message.text[1:].split('_')[-1]
    await update.message.reply_text(
        f"<a href='https://web.telegram.org/k/#{txt_user}'>–ù–∞–ø–∏—Å–∞—Ç—å!</a>",
        parse_mode='HTML',
    )

